<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何宇航-on line</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyiqie.com/"/>
  <updated>2020-06-19T00:38:04.000Z</updated>
  <id>https://hyiqie.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go-Gameday</title>
    <link href="https://hyiqie.com/article/Go-Gameday-md.html"/>
    <id>https://hyiqie.com/article/Go-Gameday-md.html</id>
    <published>2020-06-15T07:12:33.000Z</published>
    <updated>2020-06-19T00:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry,This page requires a password!." />    <label for="pass">Sorry,This page requires a password!.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry,This page requires a password!.
    
    </summary>
    
      <category term="业余" scheme="https://hyiqie.com/categories/%E4%B8%9A%E4%BD%99/"/>
    
    
      <category term="Gameday" scheme="https://hyiqie.com/tags/Gameday/"/>
    
      <category term="AWS" scheme="https://hyiqie.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>First-year</title>
    <link href="https://hyiqie.com/article/First-year.html"/>
    <id>https://hyiqie.com/article/First-year.html</id>
    <published>2020-02-04T13:46:37.000Z</published>
    <updated>2020-06-15T08:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="祝贺本站成功苟活1年"><a href="#祝贺本站成功苟活1年" class="headerlink" title="祝贺本站成功苟活1年"></a>祝贺本站成功苟活1年</h2><pre><center><code2>一年了,期间因为一些原因不更新博客了,见谅.</code2></center></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;祝贺本站成功苟活1年&quot;&gt;&lt;a href=&quot;#祝贺本站成功苟活1年&quot; class=&quot;headerlink&quot; title=&quot;祝贺本站成功苟活1年&quot;&gt;&lt;/a&gt;祝贺本站成功苟活1年&lt;/h2&gt;&lt;pre&gt;
&lt;center&gt;&lt;code2&gt;一年了,期间因为一些原因不更新博客了,见
      
    
    </summary>
    
      <category term="业余" scheme="https://hyiqie.com/categories/%E4%B8%9A%E4%BD%99/"/>
    
    
      <category term="Year" scheme="https://hyiqie.com/tags/Year/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本加锁</title>
    <link href="https://hyiqie.com/article/Linux-Shell-Lock.html"/>
    <id>https://hyiqie.com/article/Linux-Shell-Lock.html</id>
    <published>2019-06-18T06:41:02.000Z</published>
    <updated>2020-02-04T13:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell脚本加锁"><a href="#Shell脚本加锁" class="headerlink" title="Shell脚本加锁"></a>Shell脚本加锁</h1><center>我的环境是Centos7.4!1台服务器:Server</center><br><center>x.x.x.x-<code>server</code></center><h2 id="1-上代码"><a href="#1-上代码" class="headerlink" title="1. 上代码."></a>1. 上代码.</h2><pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lockfile=<span class="string">"/tmp/free_lock"</span><span class="comment">#指定锁文件.</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$lockfile</span>"</span> ];<span class="keyword">then</span><span class="comment">#如果文件存在则.</span></span><br><span class="line"> pid=`cat <span class="variable">$lockfile</span>`<span class="comment">#获取里面的pid.</span></span><br><span class="line"> [ -n <span class="string">"<span class="variable">$pid</span>"</span> ] &amp;&amp; ps -p <span class="variable">$pid</span> &gt;/dev/null<span class="comment">#pid大于0则ps查看.</span></span><br><span class="line"> [ $? -eq 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"script is running..."</span> &amp;&amp; <span class="built_in">exit</span> 1<span class="comment">#如果ps查看成功则脚本在运行,退出.</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> $$ &gt; <span class="string">"<span class="variable">$lockfile</span>"</span><span class="comment">#将pid写到锁文件中.</span></span><br></pre></td></tr></table></figure></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shell脚本加锁&quot;&gt;&lt;a href=&quot;#Shell脚本加锁&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本加锁&quot;&gt;&lt;/a&gt;Shell脚本加锁&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!1台服务器:Server&lt;/center&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Shell" scheme="https://hyiqie.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Ansible-SSH-lock</title>
    <link href="https://hyiqie.com/article/Ansible-SSH-lock.html"/>
    <id>https://hyiqie.com/article/Ansible-SSH-lock.html</id>
    <published>2019-06-04T11:42:13.000Z</published>
    <updated>2019-06-18T06:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行ansible-playbook突然卡主的问题"><a href="#运行ansible-playbook突然卡主的问题" class="headerlink" title="运行ansible-playbook突然卡主的问题"></a>运行ansible-playbook突然卡主的问题</h1><center>我的环境是Centos7.4!1台服务器:Server</center><br><center>192.168.7.195-<code>localhost</code></center><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1. 解决方法"></a>1. 解决方法</h2><pre><center><code2>↓不清楚什么问题,可能这些ssh临时的进程出问题了.然后在次调用的时候出错就卡住了.（kill掉就好了)</code2></center>[root@localhost ~]# <code>ps -aux|grep ssh:</code>root      17629  0.0  0.1 179008  1896 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/bc1f3d4892 [mux]root      17632  0.0  0.1 179008  1900 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/669eb8e75c [mux]root      17635  0.0  0.1 179008  1900 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/bdfa719099 [mux]root      17638  0.0  0.1 179008  1896 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/05e0ba36ba [mux]root      17668  1.0  0.1 179008  1896 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/cdf6c325b7 [mux]root      17671  1.0  0.1 178972  1896 ?        Ss   12:56   0:00 ssh: /root/.ansible/cp/ca6113c638 [mux]root      17684  0.0  0.0 112708   972 pts/26   R+   12:56   0:00 grep --color=auto ssh:</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;运行ansible-playbook突然卡主的问题&quot;&gt;&lt;a href=&quot;#运行ansible-playbook突然卡主的问题&quot; class=&quot;headerlink&quot; title=&quot;运行ansible-playbook突然卡主的问题&quot;&gt;&lt;/a&gt;运行ansible-p
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Ansible" scheme="https://hyiqie.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Shell-倒计时</title>
    <link href="https://hyiqie.com/article/Shell-Countdown.html"/>
    <id>https://hyiqie.com/article/Shell-Countdown.html</id>
    <published>2019-05-20T07:30:24.000Z</published>
    <updated>2019-06-04T11:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell倒计时"><a href="#Shell倒计时" class="headerlink" title="Shell倒计时"></a>Shell倒计时</h1><center>我的环境是Centos7.4!3台服务器:Server</center><br><center>x.x.x.x-<code>yiqie</code></center><p><center><code2>↓原文来自</code2></center><br>shell编程的例子-倒计时程序：<a href="https://blog.csdn.net/talk_8/article/details/44885929" target="_blank" rel="noopener">https://blog.csdn.net/talk_8/article/details/44885929</a></p><h2 id="1-直接上脚本"><a href="#1-直接上脚本" class="headerlink" title="1. 直接上脚本"></a>1. 直接上脚本</h2><pre>[root@yiqie auth]# <code>vim test.sh</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;31m "</span>-----------------Ready install-----------------<span class="string">" \e[0m"</span></span><br><span class="line">tput sc                         <span class="comment">#保存当前光标的位置：这里是第一位.</span></span><br><span class="line"><span class="keyword">for</span>((i=20;i&gt;=0;i--));           <span class="comment">#倒计时20秒.</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">"\e[1;32m "</span>-------------Countdown : <span class="variable">$i</span> seconds------------<span class="string">" \e[0m"</span></span><br><span class="line">sleep 1                         <span class="comment">#延迟1秒钟.</span></span><br><span class="line">tput rc                         <span class="comment">#恢复光标位置.</span></span><br><span class="line">tput ed                         <span class="comment">#从当前位置删除到结尾</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n\e[1;31m "</span>-----------------Start install-----------------<span class="string">" \e[0m"</span></span><br></pre></td></tr></table></figure></pre><h2 id="2-效果"><a href="#2-效果" class="headerlink" title="2. 效果"></a>2. 效果</h2><pre><center><code2>↓开始运行</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-20_1.png" alt="无法显示" title="开始"><center><code2>↓运行完毕</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-20_2.png" alt="无法显示" title="结束"></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shell倒计时&quot;&gt;&lt;a href=&quot;#Shell倒计时&quot; class=&quot;headerlink&quot; title=&quot;Shell倒计时&quot;&gt;&lt;/a&gt;Shell倒计时&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!3台服务器:Server&lt;/center&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Shell" scheme="https://hyiqie.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux-脚本加密</title>
    <link href="https://hyiqie.com/article/Linux-scripts-encrypt.html"/>
    <id>https://hyiqie.com/article/Linux-scripts-encrypt.html</id>
    <published>2019-05-18T06:21:58.000Z</published>
    <updated>2019-05-20T08:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用SHC给Shell脚本加密"><a href="#使用SHC给Shell脚本加密" class="headerlink" title="使用SHC给Shell脚本加密"></a>使用SHC给Shell脚本加密</h1><center>我的环境是Centos7.4!1台服务器:Server</center><br><center>x.x.x.x-<code>yiqie</code></center><p><center><code2>↓原文来自</code2></center><br>CentOS6.x安装shc3.8.9：<a href="https://blog.csdn.net/myiaas/article/details/50669410" target="_blank" rel="noopener">https://blog.csdn.net/myiaas/article/details/50669410</a></p><h2 id="1-下载SHC软件包"><a href="#1-下载SHC软件包" class="headerlink" title="1. 下载SHC软件包"></a>1. 下载SHC软件包</h2><pre>[root@yiqie ~]# <code>cd /data/soft/</code>[root@yiqie soft]# <code>wget http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9b.tgz</code></pre><h2 id="2-解压并安装"><a href="#2-解压并安装" class="headerlink" title="2. 解压并安装"></a>2. 解压并安装</h2><pre>[root@yiqie soft]# <code>tar -zxf shc-3.8.9b.tgz</code>[root@yiqie soft]# <code>mv shc-3.8.9b /usr/local/shc</code>[root@yiqie soft]# <code>cd /usr/local/shc/</code>[root@yiqie shc]# <code>mkdir -p /usr/local/man/man1</code>[root@yiqie shc]# <code>make test</code>[root@yiqie shc]# <code>make strings</code>[root@yiqie shc]# <code>make expiration</code>[root@yiqie shc]# <code>make install</code>***     Installing shc and shc.1 on /usr/local***     you want to continue? <code>yes</code>install -c -s shc /usr/local/bin/install -c -m 644 shc.1 /usr/local/man/man1/</pre><h2 id="3-加密文档"><a href="#3-加密文档" class="headerlink" title="3. 加密文档"></a>3. 加密文档</h2><pre>[root@yiqie shc]# <code>cd /tmp/</code>[root@yiqie tmp]# <code>vim scripts.sh</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hehe"</span></span><br></pre></td></tr></table></figure>[root@yiqie tmp]# <code>bash scripts.sh</code>hehe<center><code2>↓ -e 时间、-m 信息、-r 可在相同操作系统的不同主机执行、-f 指定脚本.</code2></center>[root@yiqie tmp]# <code>shc -e 20/5/2019 -m "invalid" -r -f scripts.sh</code><center><code2>↓生成了3个文件,第一个是原文件,第二个是二进制文件.</code2></center>[root@yiqie tmp]# <code>ls scripts.sh*</code>scripts.sh  scripts.sh.x  scripts.sh.x.c<center><code2>↓可以执行.</code2></center>[root@yiqie tmp]# <code>./scripts.sh.x</code>hehe</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用SHC给Shell脚本加密&quot;&gt;&lt;a href=&quot;#使用SHC给Shell脚本加密&quot; class=&quot;headerlink&quot; title=&quot;使用SHC给Shell脚本加密&quot;&gt;&lt;/a&gt;使用SHC给Shell脚本加密&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Security" scheme="https://hyiqie.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Compose</title>
    <link href="https://hyiqie.com/article/Docker-Compose.html"/>
    <id>https://hyiqie.com/article/Docker-Compose.html</id>
    <published>2019-05-16T09:41:30.000Z</published>
    <updated>2019-05-21T03:09:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-compose的使用"><a href="#Docker-compose的使用" class="headerlink" title="Docker-compose的使用"></a>Docker-compose的使用</h1><center>我的环境是Centos7.4!3台服务器:Server</center><br><center>172.16.255.116-<code>www1</code></center><pre><center><code2>↓简介</code2></center>1.Docker-Compose项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排.2.Docker-Compose将所管理的容器分为三层，分别是工程（project），服务（service）以及容器（container）.</pre><p><center><code2>↓原文出自</code2></center><br>docker-compose入门：<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a><br>Docker快速入门：<a href="https://blog.51cto.com/9291927/2310444" target="_blank" rel="noopener">https://blog.51cto.com/9291927/2310444</a></p><h2 id="1-Compose和Docker兼容性"><a href="#1-Compose和Docker兼容性" class="headerlink" title="1. Compose和Docker兼容性."></a>1. Compose和Docker兼容性.</h2><p>历史版本：<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a></p><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-16_1.png" alt="无法显示" title="版本对应表"></pre><h2 id="2-下载docker-compose文件"><a href="#2-下载docker-compose文件" class="headerlink" title="2. 下载docker-compose文件."></a>2. 下载docker-compose文件.</h2><pre>[root@www1 ~]# <code>wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-linux-x86_64 -O /usr/local/bin/docker-compose</code>[root@www1 ~]# <code>chmod +x /usr/local/bin/docker-compose</code>[root@www1 web]# <code>docker-compose --version</code>docker-compose version 1.24.0, build 0aa59064</pre><h2 id="3-Compose-小实验"><a href="#3-Compose-小实验" class="headerlink" title="3. Compose-小实验."></a>3. Compose-小实验.</h2><h3 id="3-1-创建实验目录"><a href="#3-1-创建实验目录" class="headerlink" title="3.1 创建实验目录."></a>3.1 创建实验目录.</h3><pre><center><code2>↓创建一个测试目录.</code2></center>[root@www1 ~]# <code>mkdir /tmp/compose && cd /tmp/compose </code><center><code2>↓创建web使用的目录.</code2></center>[root@www1 compose]# <code>mkdir web/src/ -p</code></pre><h3 id="3-2-编辑容器使用的脚本和文件"><a href="#3-2-编辑容器使用的脚本和文件" class="headerlink" title="3.2 编辑容器使用的脚本和文件."></a>3.2 编辑容器使用的脚本和文件.</h3><pre><center><code2>↓创建一个python脚本.</code2></center>[root@www1 compose]# <code>vim web/src/app.py</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen &#123;&#125; times.\n'</span>.format(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><center><code2>↓编辑需要安装的包.</code2></center>[root@www1 compose]# <code>vim web/src/requirements.txt</code><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flask</span></span><br><span class="line"><span class="attribute">redis</span></span><br></pre></td></tr></table></figure></pre><h3 id="3-3-创建Dockerfile和docker-compose"><a href="#3-3-创建Dockerfile和docker-compose" class="headerlink" title="3.3 创建Dockerfile和docker-compose."></a>3.3 创建Dockerfile和docker-compose.</h3><pre>[root@www1 compose]# <code>vim web/Dockerfile</code><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取一个python容器.</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.4</span>-alpine</span><br><span class="line"><span class="comment">#将src目录拷贝到容器的/src中.</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./src /src</span></span><br><span class="line"><span class="bash"><span class="comment">#指定工作目录.</span></span></span><br><span class="line"><span class="bash">WORKDIR /src</span></span><br><span class="line"><span class="bash"><span class="comment">#容器中运行pip命令安装flask和redis.</span></span></span><br><span class="line"><span class="bash">RUN pip install -r requirements.txt</span></span><br><span class="line"><span class="bash"><span class="comment">#启动容器时执行python app.py.</span></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"python"</span>,<span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure>[root@www1 compose]# <code>vim docker-compose.yml</code><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3.7'</span></span><br><span class="line"><span class="attribute">services</span>:                                       #下面定义了两个服务(web|redis).              </span><br><span class="line">        <span class="attribute">web</span>:</span><br><span class="line">                <span class="attribute">build</span>: ./web/                   #WEB的Dockerfile的路径.</span><br><span class="line">                <span class="attribute">ports</span>:                          #映射端口<span class="number">5000</span>到宿主机.</span><br><span class="line">                        - <span class="string">"5000:5000"</span></span><br><span class="line">        <span class="attribute">redis</span>:</span><br><span class="line">                <span class="attribute">image</span>: <span class="string">"redis:alpine"</span>           #运行一个<span class="attribute">redis</span>:alpine容器.</span><br></pre></td></tr></table></figure>[root@www1 compose]# <code>docker-compose -f docker-compose.yml up</code>Creating compose_redis_1 ... doneCreating compose_web_1   ... doneweb_1    |  * Serving Flask app "app" (lazy loading)web_1    |  * Environment: productionweb_1    |    WARNING: Do not use the development server in a production environment.web_1    |    Use a production WSGI server instead.web_1    |  * Debug mode: onweb_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)web_1    |  * Restarting with statweb_1    |  * Debugger is active!web_1    |  * Debugger PIN: 119-539-681</pre><h3 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试."></a>3.4 测试.</h3><pre>[root@www1 ~]# <code>curl localhost:5000</code>Hello World! I have been seen 1 times.[root@www1 ~]# <code>curl localhost:5000</code>Hello World! I have been seen 2 times.[root@www1 ~]# <code>curl localhost:5000</code>Hello World! I have been seen 3 times.[root@www1 ~]# <code>curl localhost:5000</code>Hello World! I have been seen 4 times.</pre><h2 id="4-部分命令总结"><a href="#4-部分命令总结" class="headerlink" title="4. 部分命令总结."></a>4. 部分命令总结.</h2><pre>docker-compose up -d               #在后台启动docker-compose.yml.docker-compose ps                  #查看当前运行的容器.docker-compose stop                #停止docker-compose.yml.docker-compose start               #恢复停止的docker-compose.yml.docker-compose down --volumes      #删除docker-compose.yml生成的容器（--volumes还删除Redis容器使用的数据卷）.</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-compose的使用&quot;&gt;&lt;a href=&quot;#Docker-compose的使用&quot; class=&quot;headerlink&quot; title=&quot;Docker-compose的使用&quot;&gt;&lt;/a&gt;Docker-compose的使用&lt;/h1&gt;&lt;center&gt;我的环境是
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Docker" scheme="https://hyiqie.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-CE的安装</title>
    <link href="https://hyiqie.com/article/Docker-CE-Install.html"/>
    <id>https://hyiqie.com/article/Docker-CE-Install.html</id>
    <published>2019-05-16T09:40:18.000Z</published>
    <updated>2019-05-17T03:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker-CE"></a>安装Docker-CE</h1><center>我的环境是Centos7.4!3台服务器:Server</center><br><center>172.16.255.116-<code>www1</code></center><pre><center><code2>↓简介</code2></center>Docker从1.13.x版本开始，版本分为企业版EE和社区版CE，版本号也改为按照时间线来发布，比如17.03就是2017年3月.</pre><p><center><code2>↓原文出自</code2></center><br>获得CentOS的Docker CE：<a href="https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites</a></p><h2 id="1-删除原来的Docker软件"><a href="#1-删除原来的Docker软件" class="headerlink" title="1. 删除原来的Docker软件."></a>1. 删除原来的Docker软件.</h2><pre>[root@www1 ~]# <code>yum remove docker \                   docker-client \                   docker-client-latest \                   docker-common \                   docker-latest \                   docker-latest-logrotate \                   docker-logrotate \                   docker-engine</code></pre><h2 id="2-安装依赖并设置存储库"><a href="#2-安装依赖并设置存储库" class="headerlink" title="2. 安装依赖并设置存储库."></a>2. 安装依赖并设置存储库.</h2><pre>[root@www1 ~]# <code>yum install -y yum-utils \   device-mapper-persistent-data \   lvm2</code>[root@www1 ~]# <code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h2 id="3-安装Docker-CE并启动"><a href="#3-安装Docker-CE并启动" class="headerlink" title="3. 安装Docker-CE并启动."></a>3. 安装Docker-CE并启动.</h2><pre>[root@www1 ~]# <code>yum install docker-ce docker-ce-cli containerd.io</code>[root@www1 ~]# <code>systemctl start docker</code></pre><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><pre>[root@www1 ~]# <code>docker version</code>Client: Version:           18.09.6 API version:       1.39 Go version:        go1.10.8 Git commit:        481bc77156 Built:             Sat May  4 02:34:58 2019 OS/Arch:           linux/amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          18.09.6  API version:      1.39 (minimum version 1.12)  Go version:       go1.10.8  Git commit:       481bc77  Built:            Sat May  4 02:02:43 2019  OS/Arch:          linux/amd64  Experimental:     false</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Docker-CE&quot;&gt;&lt;a href=&quot;#安装Docker-CE&quot; class=&quot;headerlink&quot; title=&quot;安装Docker-CE&quot;&gt;&lt;/a&gt;安装Docker-CE&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!3台服务器:Server&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Docker" scheme="https://hyiqie.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-私有仓库-密码认证（+证书）</title>
    <link href="https://hyiqie.com/article/Docker-Registry-Auth2.html"/>
    <id>https://hyiqie.com/article/Docker-Registry-Auth2.html</id>
    <published>2019-05-13T12:13:47.000Z</published>
    <updated>2019-07-02T04:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建密码认证的私有仓库-如果想要使用就带证书-否则不安全"><a href="#搭建密码认证的私有仓库-如果想要使用就带证书-否则不安全" class="headerlink" title="搭建密码认证的私有仓库(如果想要使用就带证书,否则不安全)"></a>搭建密码认证的私有仓库(如果想要使用就带证书,否则不安全)</h1><center>我的环境是Centos7.4!2台服务器:Server、Client(docker版本为1.13.1)</center><br><center>192.168.237.130-<code>server</code>|192.168.237.132-<code>server-2</code></center><pre><center><code2>↓操作</code2></center>服务端:1.创建一个带帐号和密码的文件.2.启动仓库（指定认证类型和认证的密码文件）.客户端:1.使用login登录仓库就可以访问了.</pre><p><center><code2>↓原文出自</code2></center><br>超详细记录公司多用户Docker仓库创建安全认证和应用：<a href="https://blog.csdn.net/dream_an/article/details/58005324" target="_blank" rel="noopener">https://blog.csdn.net/dream_an/article/details/58005324</a></p><h2 id="1-创建密码文件以及环境介绍"><a href="#1-创建密码文件以及环境介绍" class="headerlink" title="1. 创建密码文件以及环境介绍"></a>1. 创建密码文件以及环境介绍</h2><pre><center><code2>↓创建密码文件.</code2></center>[root@server ~]# <code>mkdir /etc/docker/auth</code>[root@server ~]# <code>docker run --entrypoint htpasswd docker.io/registry:latest -Bbn hyiqie 123456 >/etc/docker/auth/htpasswd</code><center><code2>↓Docker环境.</code2></center>[root@server ~]# <code>docker version</code>Client: Version:         1.13.1 API version:     1.26 Package version: docker-1.13.1-96.gitb2f74b2.el7.centos.x86_64 Go version:      go1.10.3 Git commit:      b2f74b2/1.13.1 Built:           Wed May  1 14:55:20 2019 OS/Arch:         linux/amd64Server: Version:         1.13.1 API version:     1.26 (minimum version 1.12) Package version: docker-1.13.1-96.gitb2f74b2.el7.centos.x86_64 Go version:      go1.10.3 Git commit:      b2f74b2/1.13.1 Built:           Wed May  1 14:55:20 2019 OS/Arch:         linux/amd64 Experimental:    false[root@server ~]# <code>docker images</code>REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE192.168.237.130:5000/nginx   latest              53f3fd8007f7        5 days ago          109 MBdocker.io/nginx              latest              53f3fd8007f7        5 days ago          109 MBdocker.io/registry           latest              f32a97de94e1        2 months ago        25.8 MB</pre><h2 id="2-启动私有仓库"><a href="#2-启动私有仓库" class="headerlink" title="2. 启动私有仓库"></a>2. 启动私有仓库</h2><pre><center><code2>↓启动私有仓库.</code2></center>[root@server ~]# <code>docker run -d -p 5000:5000 --restart=always --name registry \-v /data/registry/:/var/lib/registry/ \-v /etc/docker/auth/:/auth/ \-e REGISTRY_AUTH=htpasswd \-e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" \-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \docker.io/registry:latest</code>c894b1c4c8a20973d6ebd528841e0d3f61642116e2a1b00dd5c7dc5399715d4a</pre><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><pre><center><code2>↓允许使用不安全仓库（因为没配置证书,只能用http.）.</code2></center>[root@server ~]# <code>vim /etc/docker/daemon.json</code><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"insecure-registries"</span>:[<span class="string">"192.168.237.130:5000"</span>],               #加入这一句即可:允许使用不安全的仓库地址.</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><code2>↓重启Docker让配置生效.</code2></center>[root@server ~]# <code>systemctl restart docker</code><center><code2>↓上传失败（因为没登录）.</code2></center>[root@server ~]# <code>docker push 192.168.237.130:5000/nginx:latest</code>The push refers to a repository [192.168.237.130:5000/nginx]332fa54c5886: Preparing 6ba094226eea: Preparing 6270adb5794c: Preparing no basic auth credentials<center><code2>↓登录私有仓库.</code2></center>[root@server ~]# <code>docker login 192.168.237.130:5000</code>Username: <code>hyiqie</code>Password: <code>123456</code>Login Succeeded<center><code2>↓上传成功.</code2></center>[root@server ~]# <code>docker push 192.168.237.130:5000/nginx:latest</code>The push refers to a repository [192.168.237.130:5000/nginx]332fa54c5886: Pushed 6ba094226eea: Pushed 6270adb5794c: Pushed latest: digest: sha256:e770165fef9e36b990882a4083d8ccf5e29e469a8609bb6b2e3b47d9510e2c8d size: 948<center><code2>↓查询失败.</code2></center>[root@server ~]# <code>curl https://192.168.237.130:5000/v2/_catalog -k</code>{"errors":[{"code":"UNAUTHORIZED","message":"authentication required","detail":[{"Type":"registry","Class":"","Name":"catalog","Action":"*"}]}]}<center><code2>↓设置帐号密码后查询成功.</code2></center>[root@server ~]# <code>curl https://192.168.237.130:5000/v2/_catalog -k -u hyiqie:123456</code>{"repositories":["nginx"]}</pre><h2 id="4-整合-证书-密码"><a href="#4-整合-证书-密码" class="headerlink" title="4. 整合(证书+密码)"></a>4. 整合(证书+密码)</h2><p><center><code3>↓↓说明↓↓</code3></center></p><p><code3>将证书认证和密码认证配置在一起</code3></p><h3 id="4-1-服务器"><a href="#4-1-服务器" class="headerlink" title="4.1 服务器"></a>4.1 服务器</h3><pre>[root@server ~]# <code>mkdir /etc/docker/certs.d/192.168.237.130:5000</code>[root@server ~]# <code>mkdir /etc/docker/auth</code>[root@server ~]# <code>cp cacert.pem /etc/docker/certs.d/192.168.237.130\:5000/ca.crt</code>[root@server ~]# <code>cp new* /etc/docker/certs.d/</code>[root@server ~]# <code>docker run --entrypoint htpasswd docker.io/registry:latest -Bbn hyiqie 123456 >/etc/docker/auth/htpasswd</code>[root@server ~]# <code>docker run -d -p 5000:5000 --restart=always --name registry \-v /data/registry/:/var/lib/registry/ \-v /etc/docker/certs.d/:/certs.d/ \-v /etc/docker/auth/:/auth/ \-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs.d/newcert.pem \-e REGISTRY_HTTP_TLS_KEY=/certs.d/newreq.pem \-e REGISTRY_AUTH=htpasswd \-e REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm" \-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \docker.io/registry:latest</code>44db15e69d3fb81e202ec4672c1c7e44508af950aabc123c2f47fdedcb101819</pre><h3 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h3><pre>[root@server-2 ~]# <code>scp -r 192.168.237.130:/etc/docker/certs.d/192.168.237.130:5000 /etc/docker/certs.d/</code>root@192.168.237.130's password:<code>123456</code> ca.crt                                                                    100% 4295   915.7KB/s   00:00   </pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建密码认证的私有仓库-如果想要使用就带证书-否则不安全&quot;&gt;&lt;a href=&quot;#搭建密码认证的私有仓库-如果想要使用就带证书-否则不安全&quot; class=&quot;headerlink&quot; title=&quot;搭建密码认证的私有仓库(如果想要使用就带证书,否则不安全)&quot;&gt;&lt;/a&gt;搭
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Docker" scheme="https://hyiqie.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker-私有仓库-证书认证</title>
    <link href="https://hyiqie.com/article/Docker-Registry-Auth.html"/>
    <id>https://hyiqie.com/article/Docker-Registry-Auth.html</id>
    <published>2019-05-13T03:08:43.000Z</published>
    <updated>2019-07-02T04:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建证书认证的私有仓库"><a href="#搭建证书认证的私有仓库" class="headerlink" title="搭建证书认证的私有仓库"></a>搭建证书认证的私有仓库</h1><center>我的环境是Centos7.4!2台服务器:Server、Client(docker版本为1.13.1)</center><br><center>192.168.237.130-<code>server</code>|192.168.237.132-<code>server-2</code></center><pre><center><code2>↓操作</code2></center>服务端:1.创建证书.2.在/etc/docker/certs.d/下创建仓库名称的文件夹.并将ca证书放入里面(名称要为ca.crt).3.启动仓库时指定服务证书和私钥.客户端:1.在/etc/docker/certs.d/下创建服务端仓库名称的文件夹.并拷贝服务器端的ca.crt到里边.</pre><p><center><code2>↓原文出自</code2></center><br>搭建一个支持HTTPS的私有DOCKER Registry：<a href="https://blog.51cto.com/as007012/2087228" target="_blank" rel="noopener">https://blog.51cto.com/as007012/2087228</a></p><h2 id="1-创建证书以及环境介绍"><a href="#1-创建证书以及环境介绍" class="headerlink" title="1. 创建证书以及环境介绍"></a>1. 创建证书以及环境介绍</h2><p><center><code3>↓↓说明↓↓</code3></center></p><code3>两台服务器分别安装了docker(并下载了registry和nginx镜像).其中一台有ca证书(为了方便我放到/root/目录).</code3><pre>[root@server ~]# <code>ls *.pem</code>cacert.pem<center><code2>↓创建扩展证书的文件.</code2></center>[root@server ~]# <code>vim openssl-exts.conf</code>extensions = san[san]keyUsage = digitalSignatureextendedKeyUsage = clientAuth,serverAuthsubjectKeyIdentifier = hashauthorityKeyIdentifier = keyid,issuersubjectAltName = IP:192.168.237.130,IP:127.0.0.1,DNS:localhost,DNS:192.168.237.130:5000<center><code2>↓创建私钥.</code2></center>[root@server ~]# <code>openssl genrsa -out newreq.pem 1024</code>Generating RSA private key, 1024 bit long modulus...........................................++++++.++++++e is 65537 (0x10001)<center><code2>↓创建证书请求.</code2></center>[root@server ~]# <code>openssl req -new -newkey rsa:1024 -nodes -sha256 -key newreq.pem \-out docker.csr \-subj "/C=CN/ST=HB/L=WH/O=DM/OU=YPT/CN=192.168.237.130:5000"</code><center><code2>↓创建证书.</code2></center>[root@server ~]# <code>openssl x509 -req -sha256 -in docker.csr \-CA cacert.pem -CAkey cakey.pem -CAcreateserial \-out newcert.pem -days 99999 \-extfile ./openssl-exts.conf</code>Signature oksubject=/C=CN/ST=HB/L=WH/O=DM/OU=YPT/CN=192.168.237.130:5000Getting CA Private KeyEnter pass phrase for cakey.pem:<code>123456</code><center><code2>↓Docker环境.</code2></center>[root@server ~]# <code>docker version</code>Client: Version:         1.13.1 API version:     1.26 Package version: docker-1.13.1-96.gitb2f74b2.el7.centos.x86_64 Go version:      go1.10.3 Git commit:      b2f74b2/1.13.1 Built:           Wed May  1 14:55:20 2019 OS/Arch:         linux/amd64Server: Version:         1.13.1 API version:     1.26 (minimum version 1.12) Package version: docker-1.13.1-96.gitb2f74b2.el7.centos.x86_64 Go version:      go1.10.3 Git commit:      b2f74b2/1.13.1 Built:           Wed May  1 14:55:20 2019 OS/Arch:         linux/amd64 Experimental:    false[root@server ~]# <code>docker images</code>REPOSITORY           TAG                 IMAGE ID            CREATED             SIZEdocker.io/nginx      latest              53f3fd8007f7        5 days ago          109 MBdocker.io/registry   latest              f32a97de94e1        2 months ago        25.8 MB</pre><h2 id="2-启动私有仓库"><a href="#2-启动私有仓库" class="headerlink" title="2. 启动私有仓库"></a>2. 启动私有仓库</h2><pre><center><code2>↓创建存放ca证书的目录.</code2></center>[root@server ~]# <code>mkdir /etc/docker/certs.d/192.168.237.130:5000</code><center><code2>↓放入ca证书.</code2></center>[root@server ~]# <code>cp /root/cacert.pem /etc/docker/certs.d/192.168.237.130\:5000/ca.crt</code><center><code2>↓放入认证证书.</code2></center>[root@server ~]# <code>cp /root/newcert.pem /root/newreq.pem /etc/docker/certs.d/</code><center><code2>↓启动私有仓库.</code2></center>[root@server ~]# <code>docker run -d -p 5000:5000 --restart=always --name registry \-v /data/registry/:/var/lib/registry \-v /etc/docker/certs.d/:/certs.d/ \-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs.d/newcert.pem \-e REGISTRY_HTTP_TLS_KEY=/certs.d/newreq.pem \docker.io/registry</code>eb6cfb86567fa2483ea8d7797717435c83ec77400535af64e836fd959a88ab19<center><code2>↓更改原nginx镜像标签指定到私有仓库上.</code2></center>[root@server ~]# <code>docker tag 53f3fd8007f7 192.168.237.130:5000/nginx:latest</code><center><code2>↓上传nginx镜像到私有仓库.</code2></center>[root@server ~]# <code>docker push 192.168.237.130:5000/nginx:latest</code>The push refers to a repository [192.168.237.130:5000/nginx]332fa54c5886: Pushed 6ba094226eea: Pushed 6270adb5794c: Pushed latest: digest: sha256:e770165fef9e36b990882a4083d8ccf5e29e469a8609bb6b2e3b47d9510e2c8d size: 948</pre><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><pre><center><code2>↓创建目录.</code2></center>[root@server-2 ~]# <code>mkdir /etc/docker/certs.d/192.168.237.130:5000</code><center><code2>↓拷贝ca证书.</code2></center>[root@server-2 ~]# <code>scp 192.168.237.130:/etc/docker/certs.d/192.168.237.130:5000/ca.crt /etc/docker/certs.d/192.168.237.130:5000</code>root@192.168.237.130's password: ca.crt                                                                        100% 4295     1.7MB/s   00:00  <center><code2>↓拉取镜像.</code2></center>[root@server-2 ~]# <code>docker pull 192.168.237.130:5000/nginx:latest</code>Trying to pull repository 192.168.237.130:5000/nginx ... latest: Pulling from 192.168.237.130:5000/nginx743f2d6c1f65: Pull complete 6bfc4ec4420a: Pull complete 688a776db95f: Pull complete Digest: sha256:e770165fef9e36b990882a4083d8ccf5e29e469a8609bb6b2e3b47d9510e2c8dStatus: Downloaded newer image for 192.168.237.130:5000/nginx:latest</pre><h2 id="4-报错"><a href="#4-报错" class="headerlink" title="4. 报错"></a>4. 报错</h2><pre>[root@localhost ~]# <code>docker pull 192.168.8.235:5000/nginx:latest</code>Trying to pull repository 192.168.8.235:5000/nginx ... Get https://192.168.8.235:5000/v1/_ping: http: server gave HTTP response to HTTPS client[root@localhost ~]# <code>vim /etc/docker/daemon.json</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.8.235:5000"</span>]&#125;</span><br></pre></td></tr></table></figure></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建证书认证的私有仓库&quot;&gt;&lt;a href=&quot;#搭建证书认证的私有仓库&quot; class=&quot;headerlink&quot; title=&quot;搭建证书认证的私有仓库&quot;&gt;&lt;/a&gt;搭建证书认证的私有仓库&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!2台服务器:Server、C
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Docker" scheme="https://hyiqie.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>K8S-容器升级和回滚</title>
    <link href="https://hyiqie.com/article/K8S-container-upgrade.html"/>
    <id>https://hyiqie.com/article/K8S-container-upgrade.html</id>
    <published>2019-05-09T02:28:38.000Z</published>
    <updated>2019-05-13T11:59:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pod容器的升级和回滚"><a href="#Pod容器的升级和回滚" class="headerlink" title="Pod容器的升级和回滚"></a>Pod容器的升级和回滚</h1><center>我的环境是Centos7.4!3台服务器:Master、Minion(node) –（Kubernetes v1.5.2）</center><br><center>192.168.5.10-<code>server-1</code>|192.168.5.11-<code>server-2</code></center><pre><center><code2>↓简述</code2></center>1.高并发、高可用系统普及的今天，服务的升级更新至少要做到“业务不中断”.而滚动更新(Rolling-update)恰是满足这一需求的一种系统更新升级方案.2.滚动更新就是针对多实例服务的一种不中断服务的更新升级方式.一般情况，对于多实例服务，滚动更新采用对各个实例逐个进行单独更新而非同一时刻对所有实例进行全部更新的方式.3.对于Kubernetes集群部署的Service来说，Rolling update就是指一次仅更新一个Pod，然后逐个进行更新，而不是在同一时刻将该Service下面的所有Pod shutdown，然后去更新，逐个更新可以避免将业务中断.<center><code2>↓原理</code2></center>通过<code>kubectl  get deployment hainan-nginx-group -o yaml</code>可以查看到以下两个参数,通过它们来精确地控制着每次滚动的pod数量.1.maxSurge       滚动更新过程中运行操作期望副本数的最大pod数，可以为绝对数值(eg：5)，但不能为0，也可以为百分数(eg：10%)，默认为25%.2.maxUnavailable   滚动更新过程中不可用的最大pod数，可以为绝对数值(eg：5)，但不能为0，也可以为百分数(eg：10%)，默认为25%.</pre><p><center><code2>↓原文来自</code2></center><br>K8S中文社区：<a href="http://docs.kubernetes.org.cn/643.html" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/643.html</a></p><h2 id="1-容器创建"><a href="#1-容器创建" class="headerlink" title="1. 容器创建"></a>1. 容器创建</h2><pre><center><code2>↓创建3个容器.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-9_1.png" alt="无法显示" title="创建3个容器" height="500px"><center><code2>↓访问一下.</code2></center>[root@server-2 ~]# <code>curl 192.168.5.11:30921</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        width: 35em;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Commercial support is available at</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></pre><h2 id="2-容器升级"><a href="#2-容器升级" class="headerlink" title="2. 容器升级"></a>2. 容器升级</h2><pre><center><code2>↓nginx:v2为更新的镜像名(仓库中需要有镜像).</code2></center>[root@server-1 ~]# <code>kubectl set image deployments/hainan-nginx-group hainan-nginx-group=nginx:v2 -n default</code>deployment "hainan-nginx-group" image updated</pre><h3 id="2-1-查看状态"><a href="#2-1-查看状态" class="headerlink" title="2.1 查看状态"></a>2.1 查看状态</h3><pre><center><code2>↓查看更新进度（desired=期望处于READY的副本数、cureent=当前的副本总数、up-to-date=当前完成更新的副本数、available=当前可用的副本数）.</code2></center>[root@server-1 docker]# <code>kubectl get deployments -n default</code>NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGEhainan-nginx-group   3         3         3            2           20m[root@server-1 docker]# <code>kubectl get deployments -n default</code>NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGEhainan-nginx-group   3         3         3            3           20m<center><code2>↓查看部署状态.</code2></center>[root@server-1 docker]# <code>kubectl rollout status deployments/hainan-nginx-group -n default</code>deployment "hainan-nginx-group" successfully rolled out</pre><h3 id="2-2-测试"><a href="#2-2-测试" class="headerlink" title="2.2 测试"></a>2.2 测试</h3><pre><center><code2>↓更新镜像成功.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-9_2.png" alt="无法显示" title="更新镜像成功" height="500px"><center><code2>↓访问成功.</code2></center>[root@server-2 ~]# <code>curl 192.168.5.11:30921</code>nginx-v2</pre><h2 id="3-容器回滚"><a href="#3-容器回滚" class="headerlink" title="3. 容器回滚"></a>3. 容器回滚</h2><pre><center><code2>↓回滚到上一次的副本集.</code2></center>[root@server-1 ~]# <code>kubectl rollout undo deployments/hainan-nginx-group -n default</code>deployment "hainan-nginx-group" rolled back</pre><h3 id="3-1-测试"><a href="#3-1-测试" class="headerlink" title="3.1 测试"></a>3.1 测试</h3><pre>[root@server-2 ~]# <code>curl 192.168.5.11:30921</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        width: 35em;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Commercial support is available at</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></pre><h2 id="4-指定回滚"><a href="#4-指定回滚" class="headerlink" title="4. 指定回滚"></a>4. 指定回滚</h2><pre><center><code2>↓查看已经部署的版本（就是副本集）.</code2></center>[root@server-1 docker]# <code>kubectl rollout history deploy/hainan-nginx-group</code>deployments "hainan-nginx-group"REVISION        CHANGE-CAUSE2               none>3               none><center><code2>↓查看指定的版本信息.</code2></center>[root@server-1 ~]# <code>kubectl rollout history deploy/hainan-nginx-group --revision=3</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deployments "hainan-nginx-group" <span class="keyword">with</span> revision <span class="comment">#3</span></span><br><span class="line">  Labels:       app=hainan-nginx-<span class="keyword">group</span></span><br><span class="line">        pod-<span class="keyword">template</span>-<span class="keyword">hash</span>=<span class="number">2522410565</span></span><br><span class="line">  Containers:</span><br><span class="line">   hainan-nginx-<span class="keyword">group</span>:</span><br><span class="line">    Image:      nginx:latest</span><br></pre></td></tr></table></figure>[root@server-1 ~]# <code>kubectl rollout history deploy/hainan-nginx-group --revision=2</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deployments "hainan-nginx-group" <span class="keyword">with</span> revision <span class="comment">#2</span></span><br><span class="line">  Labels:       app=hainan-nginx-<span class="keyword">group</span></span><br><span class="line">        pod-<span class="keyword">template</span>-<span class="keyword">hash</span>=<span class="number">2330782816</span></span><br><span class="line">  Containers:</span><br><span class="line">   hainan-nginx-<span class="keyword">group</span>:</span><br><span class="line">    Image:      nginx:v2</span><br></pre></td></tr></table></figure><center><code2>↓指定回滚到某一版本.</code2></center>[root@server-1 ~]# <code>kubectl rollout undo deploy/hainan-nginx-group --to-revision=2 -n default</code>deployment "hainan-nginx-group" rolled back</pre><h3 id="4-1-测试"><a href="#4-1-测试" class="headerlink" title="4.1 测试"></a>4.1 测试</h3><pre>[root@server-2 ~]# <code>curl 192.168.5.11:30921</code>nginx-v2</pre><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><pre><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">容器升级            kubectl <span class="builtin-name">set</span> image deployments/hainan-nginx-group <span class="attribute">hainan-nginx-group</span>=nginx:v2 -n default</span><br><span class="line">容器升级进度         kubectl <span class="builtin-name">get</span> deploy/hainan-nginx-group -n default</span><br><span class="line">容器升级是否成功       kubectl rollout status deployments/hainan-nginx-group -n default</span><br><span class="line">容器回滚            kubectl rollout undo deployments/hainan-nginx-group -n default</span><br><span class="line">查看已经部署过的版本  kubectl rollout history deploy/hainan-nginx-group</span><br><span class="line">查看指定副本版本的信息   kubectl rollout history deploy/hainan-nginx-group <span class="attribute">--revision</span>=3</span><br><span class="line">容器回滚到指定的版本  kubectl rollout undo deploy/hainan-nginx-group <span class="attribute">--to-revision</span>=2 -n default</span><br></pre></td></tr></table></figure></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pod容器的升级和回滚&quot;&gt;&lt;a href=&quot;#Pod容器的升级和回滚&quot; class=&quot;headerlink&quot; title=&quot;Pod容器的升级和回滚&quot;&gt;&lt;/a&gt;Pod容器的升级和回滚&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!3台服务器:Master、M
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="K8S" scheme="https://hyiqie.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8S-外部网络</title>
    <link href="https://hyiqie.com/article/K8S-backend-network.html"/>
    <id>https://hyiqie.com/article/K8S-backend-network.html</id>
    <published>2019-05-08T11:11:13.000Z</published>
    <updated>2019-05-09T08:19:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="演示外部访问容器的方法"><a href="#演示外部访问容器的方法" class="headerlink" title="演示外部访问容器的方法"></a>演示外部访问容器的方法</h1><center>我的环境是Centos7.4!3台服务器:Master、Minion(node) –（Kubernetes v1.5.2）</center><br><center>192.168.5.10-<code>server-1</code>|192.168.5.11-<code>server-2</code></center><pre><center><code2>↓简介</code2></center>Service是kubernetes最核心的概念，通过创建Service，可以为一组具有相同功能的POD应用提供统一的访问入口，并且将请求进行负载分发到后端的各个容器应用上.</pre><center><code2>↓原文出自</code2></center><p>k8s后端服务的四种方式和kub-proxy：<a href="https://blog.csdn.net/qa1986nibuhao/article/details/80832845" target="_blank" rel="noopener">https://blog.csdn.net/qa1986nibuhao/article/details/80832845</a></p><h2 id="1-ClusterIP"><a href="#1-ClusterIP" class="headerlink" title="1. ClusterIP"></a>1. ClusterIP</h2><pre><center><code2>↓创建(右上角)两个内部服务的容器.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-8_1.png" alt="无法显示" title="创建两个nginx容器." height="500px"><center><code2>↓查看集群IP.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-8_2.png" alt="无法显示" title="查看集群ip." height="500px"></pre><h3 id="1-2-ClusterIP-内部节点访问内部服务"><a href="#1-2-ClusterIP-内部节点访问内部服务" class="headerlink" title="1.2. ClusterIP-内部节点访问内部服务"></a>1.2. ClusterIP-内部节点访问内部服务</h3><pre><center><code2>↓Node无法访问集群IP（只能访问到本地容器的nginx）.</code2></center>[root@server-2 ~]# <code>curl 10.254.122.236</code>web1[root@server-2 ~]# <code>curl 10.254.122.236</code>^[[A^C<center><code2>↓添加静态路由.</code2></center>[root@server-2 ~]# <code>route add -net 10.254.122.0/24 dev docker0</code><center><code2>↓Node成功访问集群IP(不是轮训).</code2></center>[root@server-2 ~]# <code>curl 10.254.122.236</code>web2[root@server-2 ~]# <code>curl 10.254.122.236</code>web1[root@server-2 ~]# <code>curl 10.254.122.236</code>web2[root@server-2 ~]# <code>curl 10.254.122.236</code>web2</pre><h2 id="2-LoadBalancer"><a href="#2-LoadBalancer" class="headerlink" title="2. LoadBalancer"></a>2. LoadBalancer</h2><pre><center><code2>↓创建两个外部服务的容器.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-8_3.png" alt="无法显示" title="创建两个nginx容器." height="500px"><center><code2>↓查看集群IP.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-8_4.png" alt="无法显示" title="查看集群ip." height="500px"></pre><h3 id="2-1-LoadBalancer-外部Server访问外部服务"><a href="#2-1-LoadBalancer-外部Server访问外部服务" class="headerlink" title="2.1. LoadBalancer-外部Server访问外部服务"></a>2.1. LoadBalancer-外部Server访问外部服务</h3><pre><center><code2>↓访问Node-IP+Node-Port.</code2></center>[root@server-2 ~]# <code>curl 192.168.5.11:31309</code>web3[root@server-2 ~]# <code>curl 192.168.5.11:31309</code>web4[root@server-2 ~]# <code>curl 192.168.5.11:31309</code>web3[root@server-2 ~]# <code>curl 192.168.5.11:31309</code>web3</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;演示外部访问容器的方法&quot;&gt;&lt;a href=&quot;#演示外部访问容器的方法&quot; class=&quot;headerlink&quot; title=&quot;演示外部访问容器的方法&quot;&gt;&lt;/a&gt;演示外部访问容器的方法&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!3台服务器:Master、M
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="K8S" scheme="https://hyiqie.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>Linux-sync</title>
    <link href="https://hyiqie.com/article/Linux-sync.html"/>
    <id>https://hyiqie.com/article/Linux-sync.html</id>
    <published>2019-05-07T08:42:29.000Z</published>
    <updated>2019-05-10T00:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用inotify和rsync实现数据实时同步"><a href="#使用inotify和rsync实现数据实时同步" class="headerlink" title="使用inotify和rsync实现数据实时同步"></a>使用inotify和rsync实现数据实时同步</h1><center>我的环境是Centos7.4!2台服务器:Server、Server-2</center><br><center>192.168.5.10-<code>server</code>|192.168.5.11-<code>server-2</code></center><pre><center><code2>↓简介</code2></center>inotify,它提供了一种监控文件系统（基于inode的）事件的机制，可以监控文件系统的变化如文件修改、新增、删除等，并可以将相应的事件通知给应用程序.rsync,Rsync（remote synchronize）是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件.</pre><p><center><code2>↓原文出自</code2></center><br>inotify简介：<a href="https://www.cnblogs.com/mywebnumber/p/5826767.html" target="_blank" rel="noopener">https://www.cnblogs.com/mywebnumber/p/5826767.html</a><br>inotify+rsync同步：<a href="http://www.cnblogs.com/george-guo/p/7718515.html" target="_blank" rel="noopener">http://www.cnblogs.com/george-guo/p/7718515.html</a></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="1-下载软件包"><a href="#1-下载软件包" class="headerlink" title="1. 下载软件包."></a>1. 下载软件包.</h3><pre>[root@server-1 data]# <code>yum install inotify-tools rsync -y</code></pre><h3 id="2-创建用于同步的密码文件"><a href="#2-创建用于同步的密码文件" class="headerlink" title="2. 创建用于同步的密码文件."></a>2. 创建用于同步的密码文件.</h3><pre>[root@server-1 data]# <code>vim /etc/rsync.password</code><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456</span><span class="meta">#填写客户端的密码用于认证.</span></span><br></pre></td></tr></table></figure></pre><h3 id="3-编辑实时同步脚本并运行"><a href="#3-编辑实时同步脚本并运行" class="headerlink" title="3. 编辑实时同步脚本并运行."></a>3. 编辑实时同步脚本并运行.</h3><pre>[root@server-1 data]# <code>mkdir scripts/ && cd scripts/</code>[root@server-1 scripts]# <code>vim rsync.sh</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#↓-m 监控,-r 递归,-q 安静模式,--format 格式 %w 目录名 %f 文件名,-e 事件 :创建、删除、移动、以可写方式打开的文件被关闭.</span></span><br><span class="line">inotifywait -mrq --format <span class="string">"%w%f"</span> -e create,delete,moved_to,close_write /data/<span class="built_in">test</span>/|</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#↓ -a 递归模式,-z 压缩,--password-file= 指定密码文件.</span></span><br><span class="line">rsync -az --delete /data/<span class="built_in">test</span>/ root@192.168.5.11::backup --password-file=/etc/rsync.password</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>[root@server-1 scripts]# <code>bash rsync.sh &</code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="1-下载软件包-1"><a href="#1-下载软件包-1" class="headerlink" title="1. 下载软件包."></a>1. 下载软件包.</h3><pre>[root@server-1 data]# <code>yum install rsync -y</code></pre><h3 id="2-编辑rsync配置文件"><a href="#2-编辑rsync配置文件" class="headerlink" title="2. 编辑rsync配置文件."></a>2. 编辑rsync配置文件.</h3><pre><center><code2>↓创建一个模块（backup）用于服务端引用.</code2></center>[root@server-2 test]# <code>vim /etc/rsyncd.conf</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">backup</span>]</span><br><span class="line">       uid = root</span><br><span class="line">       gid = root</span><br><span class="line">       <span class="keyword">path</span> = /<span class="keyword">data</span>/<span class="keyword">test</span></span><br><span class="line">       <span class="keyword">read</span> <span class="keyword">only</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><center><code2>↓服务端/data/test/下创建一个文件.</code2></center>[root@server-1 scripts]# <code>cd /data/test/</code>[root@server-1 test]# <code>touch test && ls -l</code>total 0-rw-r--r-- 1 root root 0 May  7 06:58 test<center><code2>↓客户端同步成功.</code2></center>[root@server-2 test]# <code>ls -l</code>total 0-rw-r--r-- 1 root root 0 May  7 06:58 test</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用inotify和rsync实现数据实时同步&quot;&gt;&lt;a href=&quot;#使用inotify和rsync实现数据实时同步&quot; class=&quot;headerlink&quot; title=&quot;使用inotify和rsync实现数据实时同步&quot;&gt;&lt;/a&gt;使用inotify和rsync实现
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Sync" scheme="https://hyiqie.com/tags/Sync/"/>
    
  </entry>
  
  <entry>
    <title>阿里云OSS挂载</title>
    <link href="https://hyiqie.com/article/Linux-OSS-Mount.html"/>
    <id>https://hyiqie.com/article/Linux-OSS-Mount.html</id>
    <published>2019-05-04T02:49:49.000Z</published>
    <updated>2019-05-07T11:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里OSS挂载"><a href="#阿里OSS挂载" class="headerlink" title="阿里OSS挂载"></a>阿里OSS挂载</h1><center>我的环境是Centos7.4!3台服务器:Zabbix、Proxy、Agent</center><br><center>192.168.237.128-<code>server</code>|192.168.237.129-<code>client</code>|192.168.237.130-<code>server-2</code></center><pre><center><code2>↓操作</code2></center>1.安装软件2.指定密钥3.挂载</pre><h2 id="1-下载rpm包并安装"><a href="#1-下载rpm包并安装" class="headerlink" title="1. 下载rpm包并安装"></a>1. 下载rpm包并安装</h2><pre>[root@yiqie soft]# <code>wget http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/32196/cn_zh/1524809958556/ossfs_1.80.4_centos7.0_x86_64.rpm</code>[root@yiqie soft]# <code>yum localinstall ossfs_1.80.4_centos7.0_x86_64.rpm -y</code></pre><h2 id="2-指定Access-Key"><a href="#2-指定Access-Key" class="headerlink" title="2. 指定Access Key"></a>2. 指定Access Key</h2><pre><center><code2>↓bucket=桶名称、id和secret可以在oss的概览中查看.</code2></center>[root@yiqie soft]# <code>echo bucket:access-key-id:access-key-secret > /etc/passwd-ossfs</code>[root@yiqie soft]# <code>chmod 640 /etc/passwd-ossfs</code></pre><h2 id="3-挂载"><a href="#3-挂载" class="headerlink" title="3. 挂载"></a>3. 挂载</h2><pre><center><code2>↓bucket=桶名称、mount-dir=挂载目录、EndPoint地址可以在桶中查看.</code2></center>[root@yiqie soft]# <code>ossfs bucket /mount-dir -ourl=http://外网访问的EndPoint地址</code></pre><h2 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4. 卸载"></a>4. 卸载</h2><pre>[root@yiqie soft]# <code>fusermount -u /mount-dir</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里OSS挂载&quot;&gt;&lt;a href=&quot;#阿里OSS挂载&quot; class=&quot;headerlink&quot; title=&quot;阿里OSS挂载&quot;&gt;&lt;/a&gt;阿里OSS挂载&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!3台服务器:Zabbix、Proxy、Agent&lt;/cent
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="OSS" scheme="https://hyiqie.com/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP</title>
    <link href="https://hyiqie.com/article/TCP-IP.html"/>
    <id>https://hyiqie.com/article/TCP-IP.html</id>
    <published>2019-05-02T10:09:05.000Z</published>
    <updated>2019-05-04T11:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><center>我的环境是Centos7.4!1台服务器:Server</center><br><center>x.x.x.x-<code>yiqie2</code></center><pre><center><code2>↓3次握手4次分手的过程.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_0.png" alt="无法显示" title="3次握手和4次分手的流程."></pre><h2 id="1-TCP-IP和OSI的区别"><a href="#1-TCP-IP和OSI的区别" class="headerlink" title="1. TCP/IP和OSI的区别"></a>1. TCP/IP和OSI的区别</h2><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_5.png" alt="无法显示" title="TCP/IP和OSI的区别."></pre><h2 id="2-TCP3次握手"><a href="#2-TCP3次握手" class="headerlink" title="2. TCP3次握手"></a>2. TCP3次握手</h2><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_1.png" alt="无法显示" title="流程图1."><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_2.png" alt="无法显示" title="流程图2."><center><code2>↓抓一下包.</code2></center>[root@yiqie2 ~]# <code>tcpdump -i eth0 host 123.125.114.144</code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20:56:50.176097<span class="built_in"> IP </span>yiqie2.35374 &gt; 123.125.114.144.http: Flags [S], seq 2488911753, win 29200, options [mss 1460,sackOK,TS val 2190274729 ecr 0,nop,wscale 7], length 0</span><br><span class="line">20:56:50.179642<span class="built_in"> IP </span>123.125.114.144.http &gt; yiqie2.35374: Flags [S.], seq 2902277794, ack 2488911754, win 8192, options [mss 1452,sackOK,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,wscale 5], length 0</span><br><span class="line">20:56:50.179652<span class="built_in"> IP </span>yiqie2.35374 &gt; 123.125.114.144.http: Flags [.], ack 1, win 229, length 0</span><br></pre></td></tr></table></figure></pre><h2 id="3-TCP4次分手"><a href="#3-TCP4次分手" class="headerlink" title="3. TCP4次分手"></a>3. TCP4次分手</h2><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_3.png" alt="无法显示" title="流程图1."><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-5-2_4.png" alt="无法显示" title="流程图2."><center><code2>↓抓一下包.</code2></center>[root@yiqie2 ~]# <code>tcpdump -i eth0 host 123.125.114.144</code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">20:56:50.184309<span class="built_in"> IP </span>yiqie2.35374 &gt; 123.125.114.144.http: Flags [F.], seq 80, ack 387, win 237, length 0</span><br><span class="line">20:56:50.187996<span class="built_in"> IP </span>123.125.114.144.http &gt; yiqie2.35374: Flags [.], ack 81, win 184, length 0</span><br><span class="line">20:56:50.188062<span class="built_in"> IP </span>123.125.114.144.http &gt; yiqie2.35374: Flags [F.], seq 387, ack 81, win 184, length 0</span><br><span class="line">20:56:50.188069<span class="built_in"> IP </span>yiqie2.35374 &gt; 123.125.114.144.http: Flags [.], ack 388, win 237, length 0</span><br></pre></td></tr></table></figure></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!1台服务器:Server&lt;/center&gt;&lt;br&gt;&lt;center&gt;x
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="TCP" scheme="https://hyiqie.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>K8S-Install</title>
    <link href="https://hyiqie.com/article/K8S-Install.html"/>
    <id>https://hyiqie.com/article/K8S-Install.html</id>
    <published>2019-04-26T02:32:44.000Z</published>
    <updated>2019-05-09T01:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S环境搭建"><a href="#K8S环境搭建" class="headerlink" title="K8S环境搭建"></a>K8S环境搭建</h1><center>我的环境是Centos7.4!2台服务器:Master、Node1 –（Kubernetes v1.5.2）</center><br><center>192.168.237.135-<code>server</code>|192.168.237.132-<code>server-2</code></center><pre><center><code2>↓原理</code2></center>1.Kubernetes（k8s）是自动化容器操作的开源平台，这些操作包括部署，调度和节点集群间扩展.2.自动化容器的部署和复制.3.随时扩展或收缩容器规模.4.将容器组织成组，并且提供容器间的负载均衡.5.很容易地升级应用程序容器的新版本.6.提供容器弹性，如果容器失效就替换它等.- Kubelect Master：Master节点负责对外提供一系列管理集群的API接口，并且通过和Minion节点交互来实现对集群的操作管理.- Api-server：用户和kubernetes集群交互的入口，封装了核心对象的增删改查操作，提供了RESTFul风格的API接口，通过etcd来实现持久化并维护对象的一致性.- Scheduler：负责集群资源的调度和管理，例如当有pod异常退出需要重新分配机器时，scheduler通过一定的调度算法从而找到最合适的节点.- Controller-manager：主要是用于保证replication Controller定义的复制数量和实际运行的pod数量一致，另外还保证了从service到pod的映射关系总是最新的.- Kubelet：运行在minion节点，负责和节点上的Docker交互，例如启停容器，监控运行状态等.- Proxy：运行在minion节点，负责为pod提供代理功能，会定期从etcd获取service信息，并根据service信息通过修改iptables来实现流量转发（最初的版本是直接通过程序提供转发功能，效率较低.），将流量转发到要访问的pod所在的节点上去.- Etcd：etcd 是一个分布式一致性k-v存储系统数据库，可用于服务注册发现与共享配置储数据库，用来存储kubernetes的信息的,etcd组件作为一个高可用、强一致性的服务发现存储仓库，渐渐为开发人员所关注。在云计算时代，如何让服务快速透明地接入到计算集群中，如何让共享配置信息快速被集群中的所有机器发现，更为重要的是，如何构建这样一套高可用、安全、易于部署以及响应快速的服务集群，etcd的诞生就是为解决该问题.- Flannel：Flannel是CoreOS团队针对Kubernetes设计的一个覆盖网络（Overlay Network）工具，Flannel目的就是为集群中的所有节点重新规划IP地址的使用规则，从而使得不同节点上的容器能够获得同属一个内网且不重复的IP地址，并让属于不同节点上的容器能够直接通过内网IP通信。<center><code2>↓操作</code2></center>1.etcd节点配置，设置监听地址并启动.2.Master-api配置关联etcd节点并开放地址,并关闭帐号认证.3.Master-config配置关联api地址.4.Master-启动上面的服务:kube-apiserver、kube-controller-manager、kube-scheduler.5.Node-config配置关联api地址.6.Node-kubelet配置关联api地址,设置节点名称.7.Node-启动:kube-proxy、kubelet、docker.8.在所有节点上面配置flanneld.9.Node-导入两个镜像:bestwu/kubernetes-dashboard-amd64:v1.6.3、pod-infrastructure.10.Master-创建两个文件dashboard-service.yaml、dashboard-controller.yaml.11.Web报错就在Node节点上开启转发功能.</pre><h2 id="1-Master"><a href="#1-Master" class="headerlink" title="1. Master"></a>1. Master</h2><h3 id="1-1-Master-安装"><a href="#1-1-Master-安装" class="headerlink" title="1.1 Master-安装"></a>1.1 Master-安装</h3><pre>[root@server ~]# <code>yum install kubernetes-master etcd flannel docker -y</code></pre><h3 id="1-2-Master-etcd配置"><a href="#1-2-Master-etcd配置" class="headerlink" title="1.2 Master-etcd配置"></a>1.2 Master-etcd配置</h3><pre><center><code2>↓修改etcd的配置文件.</code2></center>[root@server ~]# <code>vim /etc/etcd/etcd.conf</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span><span class="comment">#键值存放的地方.</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://localhost:2379,http://192.168.237.135:2379"</span><span class="comment">#监听地址.</span></span><br><span class="line">ETCD_NAME=<span class="string">"default"</span><span class="comment">#节点名称（多节点不可以一样）.</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"http://localhost:2379,http://192.168.237.135:2379"</span><span class="comment">#对外宣告地址.</span></span><br></pre></td></tr></table></figure></pre><h3 id="1-3-Master-api配置"><a href="#1-3-Master-api配置" class="headerlink" title="1.3 Master-api配置"></a>1.3 Master-api配置</h3><p><center><code3>↓↓说明↓↓</code3></center></p><p><code3>api模块</code3></p><pre>[root@server ~]# <code>vim /etc/kubernetes/apiserver</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KUBE_API_ADDRESS=<span class="string">"--insecure-bind-address=0.0.0.0"</span><span class="comment">#api开放的地址.</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--port=8080"</span><span class="comment">#api开放的端口.</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=http://192.168.237.135:2379"</span><span class="comment">#etcd的地址.</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDe</span></span><br><span class="line"><span class="string">ny,ResourceQuota"</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">""</span></span><br></pre></td></tr></table></figure></pre><h3 id="1-4-Master-config配置"><a href="#1-4-Master-config配置" class="headerlink" title="1.4 Master-config配置"></a>1.4 Master-config配置</h3><pre>[root@server ~]# <code>vim /etc/kubernetes/config</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span><span class="comment">#日志等级.</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=false"</span><span class="comment">#是否让容器开启特权模式.</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.237.135:8080"</span><span class="comment">#关联api地址.</span></span><br></pre></td></tr></table></figure></pre><h3 id="1-5-Master-启动程序"><a href="#1-5-Master-启动程序" class="headerlink" title="1.5 Master-启动程序"></a>1.5 Master-启动程序</h3><pre><center><code2>↓重启etcd服务.</code2></center>[root@server ~]# <code>systemctl restart etcd</code><center><code2>↓启动api服务.</code2></center>[root@server ~]# <code>systemctl start kube-apiserver</code>[root@server ~]# <code>systemctl start kube-controller-manager</code>[root@server ~]# <code>systemctl start kube-scheduler</code></pre><h2 id="2-Node"><a href="#2-Node" class="headerlink" title="2. Node"></a>2. Node</h2><h3 id="2-1-Node-安装"><a href="#2-1-Node-安装" class="headerlink" title="2.1 Node-安装"></a>2.1 Node-安装</h3><pre>[root@server-2 ~]# <code>yum install kubernetes-node docker flannel *rhsm* -y</code></pre><h3 id="2-2-Node-config配置"><a href="#2-2-Node-config配置" class="headerlink" title="2.2 Node-config配置"></a>2.2 Node-config配置</h3><pre>[root@server-2 ~]# <code>vim /etc/kubernetes/config</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.237.135:8080"</span><span class="comment">#关联api地址.</span></span><br></pre></td></tr></table></figure></pre><h3 id="2-3-Node-kubelet配置"><a href="#2-3-Node-kubelet配置" class="headerlink" title="2.3 Node-kubelet配置"></a>2.3 Node-kubelet配置</h3><pre>[root@server-2 ~]# <code>vim /etc/kubernetes/kubelet</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_ADDRESS=<span class="string">"--address=0.0.0.0"</span></span><br><span class="line">KUBELET_PORT=<span class="string">"--port=10250"</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=192.168.237.132"</span><span class="comment">#节点名称.</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">"--api-servers=http://192.168.237.135:8080"</span></span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">"--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span></span><br><span class="line">KUBELET_ARGS=<span class="string">""</span></span><br></pre></td></tr></table></figure></pre><h3 id="2-4-Node-启动程序"><a href="#2-4-Node-启动程序" class="headerlink" title="2.4 Node-启动程序"></a>2.4 Node-启动程序</h3><pre>[root@server-2 ~]# <code>systemctl start kube-proxy</code>[root@server-2 ~]# <code>systemctl start kubelet</code>[root@server-2 ~]# <code>systemctl start docker</code></pre><h2 id="3-配置网络"><a href="#3-配置网络" class="headerlink" title="3. 配置网络"></a>3. 配置网络</h2><pre><center><code2>↓节点配置flanneld网络.</code2></center>[root@server ~]# <code>vim /etc/sysconfig/flanneld</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">"http://192.168.237.135:2379"</span><span class="comment">#关联ETCD.</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/atomic.io/network"</span></span><br></pre></td></tr></table></figure>[root@server-2 ~]# <code>vim /etc/sysconfig/flanneld</code><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">"http://192.168.237.135:2379"</span><span class="comment">#关联ETCD.</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/atomic.io/network"</span></span><br></pre></td></tr></table></figure><center><code2>↓Master添加一个etcd网络.</code2></center>[root@server ~]# <code>etcdctl mk /atomic.io/network/config '{"Network":"172.17.0.0/16"}'</code>{"Network":"172.17.0.0/16"}<center><code2>↓启动flanneld网络.</code2></center>[root@server ~]# <code>systemctl start flanneld</code>[root@server-2 ~]# <code>systemctl start flanneld</code><center><code2>↓重启docker（这时候docker的网络就变成flanneld网段了）.</code2></center>[root@server-2 ~]# <code>systemctl restart docker</code></pre><h2 id="4-测试节点并配置Web"><a href="#4-测试节点并配置Web" class="headerlink" title="4.测试节点并配置Web"></a>4.测试节点并配置Web</h2><h3 id="4-1-查询节点是否可用"><a href="#4-1-查询节点是否可用" class="headerlink" title="4.1 查询节点是否可用"></a>4.1 查询节点是否可用</h3><pre>[root@server ~]# <code>kubectl get nodes</code>NAME              STATUS    AGE192.168.237.131   Ready     7m192.168.237.132   Ready     20h</pre><h3 id="4-2-上传镜像和启动文件并编辑"><a href="#4-2-上传镜像和启动文件并编辑" class="headerlink" title="4.2 上传镜像和启动文件并编辑"></a>4.2 上传镜像和启动文件并编辑</h3><pre><center><code2>↓下载导入镜像(Node节点需开启转发).</code2></center>[root@server-2 ~]# <code>cd /data/images/</code>[root@server-2 images]# <code>ls</code>pod-infrastructure.tgz[root@server-2 images]# <code>docker load -i pod-infrastructure.tgz</code><center><code2>↓更改镜像名称（和Node节点kubelet中的pod关联）.</code2></center>[root@server-2 images]# <code>docker tag 99965fb98423 registry.access.redhat.com/rhel7/pod-infrastructure</code>[root@server-2 images]# <code>docker pull bestwu/kubernetes-dashboard-amd64:v1.6.3</code><center><code2>↓更改镜像名称（和Master节点dashboard-controller中的pod关联）.</code2></center>[root@server-2 images]# <code>docker tag 691a82db1ecd bestwu/kubernetes-dashboard-amd64:v1.6.3</code><center><code2>↓在Master节点上面导入两个个启动文件.</code2></center>[root@server ~]# <code>cd /data/docker/</code>[root@server docker]# <code>ls</code>dashboard-controller.yaml  dashboard-service.yaml[root@server docker]# <code>vim dashboard-controller.yaml</code><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">args:</span></span><br><span class="line">  - --apiserver-host=<span class="string">http:</span><span class="comment">//192.168.237.135:8080#只需要修改api地址.</span></span><br></pre></td></tr></table></figure><center><code2>↓创建两个yaml.</code2></center>[root@server docker]# <code>kubectl create -f dashboard-service.yaml</code>service "kubernetes-dashboard" created[root@server docker]# <code>kubectl create -f dashboard-controller.yaml</code>deployment "kubernetes-dashboard" created<center><code2>↓可以查找到Web就启动了.</code2></center>[root@server docker]# <code>kubectl get pods --namespace kube-system</code>NAME                                    READY     STATUS    RESTARTS   AGEkubernetes-dashboard-2128778602-f0vzf   1/1       Running   0          11s</pre><h3 id="4-2-访问Web报错并解决"><a href="#4-2-访问Web报错并解决" class="headerlink" title="4.2 访问Web报错并解决"></a>4.2 访问Web报错并解决</h3><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-4-28_1.png" alt="无法显示" title="访问报错"><center><code2>↓开启转发.</code2></center>[root@client ~]# <code>iptables -P FORWARD ACCEPT</code><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-4-28_2.png" alt="无法显示" title="访问成功"></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;K8S环境搭建&quot;&gt;&lt;a href=&quot;#K8S环境搭建&quot; class=&quot;headerlink&quot; title=&quot;K8S环境搭建&quot;&gt;&lt;/a&gt;K8S环境搭建&lt;/h1&gt;&lt;center&gt;我的环境是Centos7.4!2台服务器:Master、Node1 –（Kubernete
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="K8S" scheme="https://hyiqie.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>Linux-防火墙</title>
    <link href="https://hyiqie.com/article/Linux-Iptables-Firewalld.html"/>
    <id>https://hyiqie.com/article/Linux-Iptables-Firewalld.html</id>
    <published>2019-04-25T06:07:04.000Z</published>
    <updated>2019-04-30T03:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPTABLES和FIREWALLD"><a href="#IPTABLES和FIREWALLD" class="headerlink" title="IPTABLES和FIREWALLD"></a>IPTABLES和FIREWALLD</h1><center>我的环境是Centos7.4!3台服务器:Zabbix、Proxy、Agent</center><br><center>192.168.237.128-<code>server</code>|192.168.237.129-<code>client</code>|192.168.237.130-<code>server-2</code></center><pre><center><code2>↓原理</code2></center><center><code3>Iptables</code3></center>1.Netfilter/Iptables(以下简称Iptables)是unix/linux自带的一款优秀且开放源代码的完全自由的基于包过滤的防火墙工具.2.它的功能十分强大，使用非常灵活，可以对流入和流出服务器的数据包进行很精细的控制.3.虽然Netfilter/iptables IP信息包过滤系统被称为单个实体，但它实际上由两个组件netfilter和iptables组成.Netfilter组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集.Iptables组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易.4.它主要工作在OSI七层的二、三、四层.<center><code3>Firewall</code3></center>1.从CentOS7开始,默认是没有iptables的,而使用了firewall防火墙，FirewallD提供了支持网络/防火墙区域(zone)定义网络链接以及接口安全等级的动态防火墙管理工具.2.firewalld和iptables之间的关系，firewalld提供了一个daemon和service，还有命令行和图形界面配置工具，它仅仅是替代了iptablesservice 部分，其底层还是使用iptables作为防火墙规则管理入口.3.firewalld使用python语言开发，在新版本中已经计划使用c++重写daemon部分.</pre><h2 id="1-IPTABLES"><a href="#1-IPTABLES" class="headerlink" title="1. IPTABLES"></a>1. IPTABLES</h2><p><center><code3>↓↓说明↓↓</code3></center></p><code3>Iptables称为静态防火墙.当Iptables的规则变更的时候,先会对旧的防火墙规则进行清空,然后重新加载所有防火墙规则.</code3><pre>Iptables的配置文件是/etc/sysconfig/iptables中.用户将防火墙规则添加进/etc/sysconfig/iptables配置文件当中，再执行命令 service iptables reload使变更的规则生效.</pre><h3 id="1-1-Iptables-数据包流程"><a href="#1-1-Iptables-数据包流程" class="headerlink" title="1.1 Iptables-数据包流程"></a>1.1 Iptables-数据包流程</h3><pre><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-4-25_1.png" alt="无法显示" title="数据流动过程">数据包先经过PREOUTING，由该链确定数据包走向：1.目的地址是本地，则发送到INPUT，让INPUT决定是否接收下来送到用户空间，流程为①--->②.2.若满足PREROUTING的nat表上的转发规则，则发送给FORWARD，然后再经过POSTROUTING发送出去，流程为： ①--->③--->④--->⑥.3.主机发送数据包时，流程则是⑤--->⑥.*.其中PREROUTING和POSTROUTING指的是数据包的流向，如上图所示POSTROUTING指的是发往公网的数据包，而PREROUTING指的是来自公网的数据包.<center><code2>↓加深的是经常用到的.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-4-25_2.png" alt="无法显示" title="数据流动过程"></pre><h3 id="1-2-Iptables-四表五链"><a href="#1-2-Iptables-四表五链" class="headerlink" title="1.2 Iptables-四表五链"></a>1.2 Iptables-四表五链</h3><pre><center><code2>↓Iptables中的四张表和五条链.</code2></center><img src="http://hyiqie.oss-cn-beijing.aliyuncs.com/cto/2019-4-25_3.png" alt="无法显示" title="四张表和五条链"></pre><h3 id="1-3-Iptables-Filter-默认"><a href="#1-3-Iptables-Filter-默认" class="headerlink" title="1.3 Iptables-Filter(默认)"></a>1.3 Iptables-Filter(默认)</h3><pre>Filter表为iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：1.INPUT链 – 处理来自外部的数据.2.OUTPUT链 – 处理向外发送的数据.3.FORWARD链 – 将数据转发到本机的其他网卡设备上.</pre><h3 id="1-4-Iptables-Nat"><a href="#1-4-Iptables-Nat" class="headerlink" title="1.4 Iptables-Nat"></a>1.4 Iptables-Nat</h3><pre>1.PREROUTING链 – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT).2.POSTROUTING链 – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）.3.OUTPUT链 – 处理本机产生的数据包.<center><code2>↓Iptables中的SNAT.</code2></center>iptables -t nat -A POSTROUTING -s 【内网ip】/24 -o ens32（注意网卡信息）  -j SNAT --to 【外网ip（固定）】或如果外网不是固定的那么启用一下的iptables -t nat -A POSTROUTING -s 【内网ip】/24 -o ens32  -j MASQUERADE<center><code2>↓Iptables中的DNAT.</code2></center>Iptables -t nat -A POSTROUTING -s 192.168.134.128/32 -j SNAT --to-source 192.168.134.129Iptables -t nat -A PREROUTING -d 192.168.134.129 -p tcp --dport 80 -j DNAT --to-destination 192.168.134.128:80其中192.168.134.129是本地ip。192.168.134.128是可以访问80的ip</pre><h2 id="2-FIREWALLD"><a href="#2-FIREWALLD" class="headerlink" title="2. FIREWALLD"></a>2. FIREWALLD</h2><p><center><code3>↓↓说明↓↓</code3></center></p><code3>Firealld称为动态防火墙.它解决了Iptablees的问题,任何规则的变更都不需要对整个防火墙进行重新加载.</code3><pre>firewalld将配置储存在/usr/lib/firewalld/和/etc/firewalld/中的各种XML文件里,其中/etc/firewalld是启动目录,而/usr/lib/firewalld就相当于模版目录.</pre><h3 id="2-1-Firewalld-默认区域"><a href="#2-1-Firewalld-默认区域" class="headerlink" title="2.1 Firewalld-默认区域"></a>2.1 Firewalld-默认区域</h3><pre><center><code2>↓查看全部区域.</code2></center>[root@server ~]# <code>firewall-cmd --get-zones</code>block dmz drop external home internal public trusted work<center><code2>↓查看默认区域.</code2></center>[root@server ~]# <code>firewall-cmd --get-default-zone</code>public</pre><h3 id="2-2-Firewalld-区域说明"><a href="#2-2-Firewalld-区域说明" class="headerlink" title="2.2 Firewalld-区域说明"></a>2.2 Firewalld-区域说明</h3><pre>drop（丢弃）任何接收的网络数据包都被丢弃，没有任何回复.仅能有发送出去的网络连接.block（限制）任何接收的网络连接都被IPv4的icmp-host-prohibited信息和IPv6的icmp6-adm-prohibited信息所拒绝.public（公共）在公共区域内使用，不能相信网络内的其他计算机不会对您的计算机造成危害，只能接收经过选取的连接.external（外部）特别是为路由器启用了伪装功能的外部网.您不能信任来自网络的其他计算，不能相信它们不会对您的计算机造成危害，只能接收经过选择的连接.dmz（非军事区）用于您的非军事区内的电脑，此区域内可公开访问，可以有限地进入您的内部网络，仅仅接收经过选择的连接.work（工作）用于工作区.您可以基本相信网络内的其他电脑不会危害您的电脑。仅仅接收经过选择的连接.home（家庭）用于家庭网络.您可以基本信任网络内的其他计算机不会危害您的计算机。仅仅接收经过选择的连接.internal（内部）用于内部网络。您可以基本上信任网络内的其他计算机不会威胁您的计算机.仅仅接受经过选择的连接.trusted（信任）可接受所有的网络连接.*.指定其中一个区域为默认区域是可行的.当接口连接加入了NetworkManager，它们就被分配为默认区域.安装时firewalld里的默认区域被设定为公共区域.</pre><h3 id="2-3-Firewalld-服务"><a href="#2-3-Firewalld-服务" class="headerlink" title="2.3 Firewalld-服务"></a>2.3 Firewalld-服务</h3><pre><center><code2>↓服务讲解.</code2></center>1.在/usr/lib/firewalld/services/目录中，还保存了另外一类配置文件，每个文件对应一项具体的网络服务，如ssh服务等.与之对应的配置文件中记录了各项服务所使用的tcp/udp端口，在最新版本的firewalld中默认已经定义了70+种服务供我们使用.2.当默认提供的服务不够用或者需要自定义某项服务的端口时，我们需要将service配置文件放置在/etc/firewalld/services/目录中.<center><code2>↓好处.</code2></center>1.通过服务名字来管理规则更加人性化.2.通过服务来组织端口分组的模式更加高效，如果一个服务使用了若干个网络端口，则服务的配置文件就相当于提供了到这些端口的规则管理的批量操作快捷方式.<center><code2>↓查看当前可用的服务.</code2></center>[root@server ~]# <code>firewall-cmd --get-services</code>RH-Satellite-6 amanda-client amanda-k5-client bacula bacula-client bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc cephceph-mon cfengine condor-collector ctdb dhcp dhcpv6 dhcpv6-client dns docker-registry dropbox-lansync elasticsearch freeipa-ldapfreeipa-ldaps freeipa-replication freeipa-trust ftp ganglia-client ganglia-master high-availability http https imap imaps ippipp-client ipsec iscsi-target kadmin kerberos kibana klogin kpasswd kshell ldap ldaps libvirt libvirt-tls managesieve mdns mosh mountd ms-wbt mssql mysql nfs nrpe ntp openvpn ovirt-imageio ovirt-storageconsole ovirt-vmconsole pmcd pmproxy pmwebapi pmwebapispop3 pop3s postgresql privoxy proxy-dhcp ptp pulseaudio puppetmaster quasselradius rpc-bind rsh rsyncd samba samba-client sane sipsips smtp smtp-submission smtps snmp snmptrap spideroak-lansync squid ssh synergy syslog syslog-tls telnet tftp tftp-client tinctor-socks transmission-client vdsm vnc-server wbem-https xmpp-bosh xmpp-client xmpp-local xmpp-server<center><code2>↓查看当前允许使用的服务.</code2></center>[root@server ~]# <code>firewall-cmd --list-services</code>ssh dhcpv6-client<center><code2>↓添加http服务.</code2></center>[root@server ~]# <code>firewall-cmd --add-service=http --permanent</code>success[root@server ~]# <code>firewall-cmd --reload</code>success[root@server ~]# <code>firewall-cmd --list-services</code>ssh dhcpv6-client http<center><code2>↓可以看到配置文件中多了一个http服务.</code2></center>[root@server ~]# <code>cat /etc/firewalld/zones/public.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>For use in public areas. You do not trust the other computers on networks to not harm your computer. </span><br><span class="line">Only selected incoming connections are accepted.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"http"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8080"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><center><code2>↓一般用端口添加的比较多.</code2></center>[root@server ~]# <code>firewall-cmd --add-port=8080/tcp --permanent</code>success[root@server ~]# <code>firewall-cmd --list-all</code>public (active)  target: default  icmp-block-inversion: no  interfaces: ens33 br0 ens34  sources:   services: ssh dhcpv6-client http  ports: 8080/tcp  protocols:   masquerade: no  forward-ports:   source-ports:   icmp-blocks:   rich rules: </pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IPTABLES和FIREWALLD&quot;&gt;&lt;a href=&quot;#IPTABLES和FIREWALLD&quot; class=&quot;headerlink&quot; title=&quot;IPTABLES和FIREWALLD&quot;&gt;&lt;/a&gt;IPTABLES和FIREWALLD&lt;/h1&gt;&lt;center&gt;我
      
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="Firewall" scheme="https://hyiqie.com/tags/Firewall/"/>
    
  </entry>
  
  <entry>
    <title>ELK-Redis</title>
    <link href="https://hyiqie.com/article/ELK-Redis.html"/>
    <id>https://hyiqie.com/article/ELK-Redis.html</id>
    <published>2019-04-23T06:29:07.000Z</published>
    <updated>2019-04-25T07:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry,This page requires a password!." />    <label for="pass">Sorry,This page requires a password!.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry,This page requires a password!.
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="ELK" scheme="https://hyiqie.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>ELK-Kibana-upgrade</title>
    <link href="https://hyiqie.com/article/ELK-Kibana-upgrade.html"/>
    <id>https://hyiqie.com/article/ELK-Kibana-upgrade.html</id>
    <published>2019-04-22T10:45:32.000Z</published>
    <updated>2019-04-24T07:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry,This page requires a password!." />    <label for="pass">Sorry,This page requires a password!.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry,This page requires a password!.
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="ELK" scheme="https://hyiqie.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>ELK-Install</title>
    <link href="https://hyiqie.com/article/ELK-Install.html"/>
    <id>https://hyiqie.com/article/ELK-Install.html</id>
    <published>2019-04-20T11:36:09.000Z</published>
    <updated>2019-04-22T10:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Sorry,This page requires a password!." />    <label for="pass">Sorry,This page requires a password!.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry,This page requires a password!.
    
    </summary>
    
      <category term="Linux" scheme="https://hyiqie.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://hyiqie.com/tags/Centos/"/>
    
      <category term="ELK" scheme="https://hyiqie.com/tags/ELK/"/>
    
  </entry>
  
</feed>
